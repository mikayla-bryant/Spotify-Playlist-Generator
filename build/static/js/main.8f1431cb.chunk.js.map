{"version":3,"sources":["components/CustomSlider/CustomSlider.js","assets/Genres.js","assets/playlistSchema.js","assets/RandomCharacters.js","redux/constants/actiontypes.js","redux/actions/actions.js","hooks/useYupValidation.js","hooks/useSlider.js","components/PlaylistForm/PlaylistForm.jsx","App.js","redux/reducers/reducer.js","index.js"],"names":["CustomSlider","withStyles","root","color","thumb","height","width","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","genres","text","value","attributes","disabled","selected","schema","yup","shape","playlistName","required","nullable","description","privacy","genre","numSongs","randomCharacters","GET_URI","GET_USER_INFO","CREATE_PLAYLIST","SEARCH_SONGS","GET_TRACK_URIS","HANDLE_FORM_VALUES","HANDLE_SLIDER_VALUE","GET_PLAYLIST_URL","SUCCESS_ALERT","LOADING_START","ALERT_MESSAGE","LOADING_FINISH","SUCCESS_FINISH","ACCESS_CODE_SUCCESS","START_AUTHORIZATION","LOADING_DONE","retrieveCodeFromURL","dispatch","code","URL","window","location","href","searchParams","get","type","payload","handleToken","getState","axios","then","res","localStorage","setItem","data","accessToken","useYupValidation","validationSchema","useCallback","a","validate","abortEarly","values","errors","inner","reduce","allErrors","currentError","path","message","useSlider","initialState","useState","setValue","bind","onChange","event","newValue","connect","state","authUri","success","playlistUrl","alertMessage","variant","token","isLoading","generatePlaylists","id","handleFormValues","formValues","handleSliderValue","sliderValue","userId","post","name","public","toString","headers","Authorization","getItem","external_urls","spotify","query","offset","limitPerRequest","finalSliderValue","trackLength","numRetries","tracks","Math","floor","random","length","items","hashMap","Map","forEach","artistName","artists","count","set","dict","filter","flat","includes","splice","searchResults","uriList","map","song","push","uri","playlistId","trackUris","uris","catch","initialAuthorize","e","preventDefault","today","Date","console","log","getToken","props","resolver","useForm","mode","register","handleSubmit","formState","bindSliderValues","useEffect","Container","className","onClick","data-testid","Form","onSubmit","Row","Col","Group","Label","Control","size","placeholder","autoComplete","xs","min","max","Check","rows","as","maxLength","valueLabelDisplay","aria-labelledby","i","key","Button","isValid","Alert","style","visibility","Link","App","snapShotId","authMessage","promiseError","reducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f1431cb.chunk.js","sourcesContent":["import Slider from '@material-ui/core/Slider';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomSlider = withStyles({\r\n  root: {\r\n    color: '#52af77',\r\n  },\r\n  thumb: {\r\n    height: 24,\r\n    width: 24,\r\n    backgroundColor: '#fff',\r\n    border: '2px solid currentColor',\r\n    marginTop: -8,\r\n    marginLeft: -12,\r\n    '&:focus, &:hover, &$active': {\r\n      boxShadow: 'inherit',\r\n    },\r\n  },\r\n  active: {},\r\n  valueLabel: {\r\n    left: 'calc(-50% + 4px)',\r\n  },\r\n  track: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n  rail: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n})(Slider);\r\n\r\nexport default CustomSlider;\r\n","const genres = [\r\n  {\r\n    text: 'Select a genre...',\r\n    value: '',\r\n    attributes: { disabled: true, selected: true },\r\n  },\r\n  { text: '<POP>', value: 'POP', attributes: { disabled: true } },\r\n\r\n  { text: 'Electropop', value: 'electropop' },\r\n  { text: 'Hyperpop', value: 'hyperpop' },\r\n  { text: 'Indie Pop', value: 'indie+pop' },\r\n  { text: 'J-Pop', value: 'japanese+pop' },\r\n  { text: 'K-Pop', value: 'k-pop' },\r\n  { text: 'Pop', value: 'Pop' },\r\n  { text: '<HIP-HOP>', value: 'HIP-HOP', attributes: { disabled: true } },\r\n  { text: 'Rap', value: 'rap' },\r\n  { text: 'Trap', value: 'trap' },\r\n  { text: 'Grime', value: 'grime' },\r\n  { text: '<R&B>', value: 'R&B', attributes: { disabled: true } },\r\n  { text: 'Soul', value: 'Soul' },\r\n  { text: 'Funk', value: 'funk' },\r\n  { text: 'Indie Soul', value: 'indie+soul' },\r\n  { text: 'Gospel', value: 'gospel' },\r\n  { text: '<ELECTRONIC>', value: 'ELECTRONIC', attributes: { disabled: true } },\r\n  { text: 'Electronic', value: 'Electronic' },\r\n  { text: 'Electronica', value: 'electronica' },\r\n  { text: 'Microhouse', value: 'microhouse' },\r\n  { text: 'Wonky', value: 'wonky' },\r\n  { text: 'Downtempo', value: 'Downtempo' },\r\n  { text: 'Jazztronica', value: 'jazztronica' },\r\n  { text: 'Techno', value: 'Techno' },\r\n  { text: 'Dubstep', value: 'Dubstep' },\r\n  { text: 'EDM', value: 'EDM' },\r\n  { text: 'IDM', value: 'IDM' },\r\n  { text: 'Tropical House', value: 'tropical' },\r\n  { text: 'Chiptune', value: 'Chiptune' },\r\n  { text: 'Synthwave', value: 'synthwave' },\r\n  {\r\n    text: '<ALTERNATIVE>',\r\n    value: 'ALTERNATIVE',\r\n    attributes: { disabled: true },\r\n  },\r\n  { text: 'Britpop', value: 'Britpop' },\r\n  { text: 'Experimental', value: 'experimental' },\r\n  { text: 'Vaporwave', value: 'vaporwave' },\r\n  { text: 'Shoegaze', value: 'shoegaze' },\r\n  { text: 'Chillwave', value: 'Chillwave' },\r\n  { text: 'Popgaze', value: 'popgaze' },\r\n  { text: 'Neo-psychedelic', value: 'neo-psychedelic' },\r\n  { text: '<ROCK>', value: 'ROCK', attributes: { disabled: true } },\r\n  { text: 'Rock', value: 'rock' },\r\n  { text: 'Dance-punk', value: 'dance-punk' },\r\n  { text: 'Alternative Metal', value: 'alternative+metal' },\r\n  { text: 'Indie Rock', value: 'indie+rock' },\r\n  { text: 'Grunge', value: 'grunge' },\r\n  { text: 'Punk', value: 'punk' },\r\n  { text: 'Emo', value: 'Emo' },\r\n  { text: 'Art Rock', value: 'art+rock' },\r\n  { text: 'Psychedelic Rock (Classic)', value: 'psychedelic+rock' },\r\n  { text: 'Hard Rock', value: 'hard+rock' },\r\n  { text: 'Garage Rock', value: 'garage+rock' },\r\n  { text: 'Surf Rock', value: 'surf+rock' },\r\n  { text: 'Math Rock', value: 'math+rock' },\r\n  { text: 'Rockabilly', value: 'rockabilly' },\r\n  { text: 'Metal', value: 'metal' },\r\n  { text: '<COUNTRY>', value: 'COUNTRY', attributes: { disabled: true } },\r\n  { text: 'Country', value: 'country' },\r\n  { text: 'Folk', value: 'folk' },\r\n  { text: 'Indie folk', value: 'indie+folk' },\r\n  { text: 'Acoustic', value: 'acoustic' },\r\n  { text: '<JAZZ>', value: 'JAZZ', attributes: { disabled: true } },\r\n  { text: 'Jazz', value: 'jazz' },\r\n  { text: 'Swing', value: 'swing' },\r\n  { text: '<WORLD>', value: 'world', attributes: { disabled: true } },\r\n  { text: 'Latin', value: 'latin' },\r\n  { text: 'Brazilian', value: 'brazilian' },\r\n  { text: 'Cumbia', value: 'cumbia' },\r\n  { text: 'Flamenco', value: 'flamenco' },\r\n  { text: 'Salsa', value: 'salsa' },\r\n  { text: 'Reggae', value: 'reggae' },\r\n  { text: 'Reggaeton', value: 'reggaeton' },\r\n  { text: 'Bachata', value: 'bachata' },\r\n  { text: 'African', value: 'african' },\r\n  { text: 'Afropop', value: 'afropop' },\r\n  { text: 'Celtic', value: 'celtic' },\r\n  { text: 'Balkan', value: 'balkan' },\r\n  { text: 'Devotional', value: 'devotional' },\r\n  { text: '<MISC>', value: 'MISC', attributes: { disabled: true } },\r\n  { text: 'Soundtrack', value: 'soundtrack' },\r\n  { text: 'Classical', value: 'classical' },\r\n  { text: 'Kids', value: 'kids' },\r\n];\r\n\r\nexport { genres };\r\n","import * as yup from 'yup';\r\n\r\n// Yup Form Validation Schema\r\nconst schema = yup.object().shape({\r\n  playlistName: yup.string().required('Playlist name is required.').nullable(),\r\n  description: yup.string().nullable(),\r\n  privacy: yup.boolean().nullable(),\r\n  genre: yup.string().required('Genre is required').nullable(),\r\n  numSongs: yup.string().required('Number of songs is required.').nullable(),\r\n});\r\n\r\nexport { schema };\r\n","const randomCharacters = [\r\n  'a',\r\n  'b',\r\n  'c',\r\n  'd',\r\n  'e',\r\n  'f',\r\n  'g',\r\n  'h',\r\n  'i',\r\n  'j',\r\n  'k',\r\n  'l',\r\n  'm',\r\n  'n',\r\n  'o',\r\n  'p',\r\n  'q',\r\n  'r',\r\n  's',\r\n  't',\r\n  'u',\r\n  'v',\r\n  'w',\r\n  'x',\r\n  'y',\r\n  'z',\r\n  '1',\r\n  '2',\r\n  '3',\r\n  '4',\r\n  '5',\r\n  '6',\r\n  '7',\r\n  '8',\r\n  '9',\r\n  '0',\r\n];\r\n\r\nexport { randomCharacters };\r\n","export const GET_URI = 'GET_URI';\r\nexport const HANDLE_TOKEN = 'HANDLE_TOKEN';\r\nexport const GET_USER_INFO = 'GET_USER_INFO';\r\nexport const CREATE_PLAYLIST = 'CREATE_PLAYLIST';\r\nexport const RANDOMIZE_QUERY = 'RANDOMIZE_QUERY';\r\nexport const SEARCH_SONGS = 'SEARCH_SONGS';\r\nexport const GET_TRACK_URIS = 'GET_TRACK_URIS';\r\nexport const HANDLE_FORM_VALUES = 'HANDLE_FORM_VALUES';\r\nexport const HANDLE_SLIDER_VALUE = 'HANDLE_SLIDER_VALUE';\r\nexport const RANDOMIZE_OFFSET = 'RANDOMIZE_OFFSET';\r\nexport const GET_PLAYLIST_URL = 'GET_PLAYLIST_URL';\r\nexport const SUCCESS_ALERT = 'SUCCESS_ALERT';\r\nexport const LOADING_START = 'LOADING_START';\r\nexport const ALERT_MESSAGE = 'ALERT_MESSAGE';\r\nexport const LOADING_FINISH = 'LOADING_FINISH';\r\nexport const SUCCESS_FINISH = 'SUCCESS_FINISH';\r\nexport const ACCESS_CODE_SUCCESS = 'ACCESS_CODE_SUCCESS';\r\nexport const START_AUTHORIZATION = 'START_AUTHORIZATION';\r\nexport const LOADING_DONE = 'LOADING_DONE';\r\n","import axios from 'axios';\r\nimport { randomCharacters } from '../../assets/RandomCharacters';\r\nimport {\r\n  GET_URI,\r\n  GET_USER_INFO,\r\n  CREATE_PLAYLIST,\r\n  SEARCH_SONGS,\r\n  GET_TRACK_URIS,\r\n  HANDLE_FORM_VALUES,\r\n  HANDLE_SLIDER_VALUE,\r\n  SUCCESS_ALERT,\r\n  GET_PLAYLIST_URL,\r\n  LOADING_START,\r\n  ALERT_MESSAGE,\r\n  LOADING_FINISH,\r\n  SUCCESS_FINISH,\r\n  ACCESS_CODE_SUCCESS,\r\n  START_AUTHORIZATION,\r\n  LOADING_DONE,\r\n} from '../constants/actiontypes';\r\n\r\n//https://spotify-playlist-backend2021.herokuapp.com\r\n//http://localhost:2025\r\n\r\n// Step 1: Begin Authorization\r\n\r\nexport const handleAuthURI = () => dispatch => {\r\n  dispatch({ type: SUCCESS_FINISH });\r\n  return axios.get('http://localhost:2025/authorize').then(res => {\r\n    var today = new Date();\r\n    console.log(today);\r\n    localStorage.setItem('validated', today);\r\n    dispatch({ type: GET_URI, payload: res.data });\r\n  });\r\n};\r\n\r\n// Step 2: Redirect User to Authorization URIs\r\n\r\nexport const redirect = () => (dispatch, getState) => {\r\n  let state = getState();\r\n  const authUri = state.authUri;\r\n  dispatch({ type: LOADING_DONE });\r\n  return (window.location.href = authUri);\r\n};\r\n\r\n// Step 3: Combine Steps 1 and 2 into a single action creator\r\nexport const initialAuthorize = e => dispatch => {\r\n  e.preventDefault();\r\n  dispatch({ type: START_AUTHORIZATION });\r\n  dispatch(handleAuthURI()).then(() => {\r\n    return dispatch(redirect());\r\n  });\r\n};\r\n\r\n// Step 4: Parse Auth Code from URL\r\n\r\nexport const retrieveCodeFromURL = () => dispatch => {\r\n  const url = new URL(window.location.href);\r\n  const code = url.searchParams.get('code');\r\n  dispatch({ type: ACCESS_CODE_SUCCESS, payload: code });\r\n};\r\n\r\n// Step 5: Save Token in State\r\n\r\nexport const handleToken = () => (dispatch, getState) => {\r\n  let state = getState();\r\n  const code = state.code;\r\n  return axios\r\n    .get(`http://localhost:2025/getcredentials?code=${code}`)\r\n    .then(res => {\r\n      localStorage.setItem('token', res.data.accessToken);\r\n    });\r\n};\r\n\r\n// Step 6: Combine Steps 3 and 4 into a single action creator\r\nexport const getToken = () => dispatch => {\r\n  dispatch(retrieveCodeFromURL()).then(() => {\r\n    return dispatch(handleToken());\r\n  });\r\n};\r\n\r\n// Step 7: Save User Id in State\r\n\r\nexport const handleUserInfo = () => dispatch => {\r\n  return axios.get('http://localhost:2025/me').then(res => {\r\n    dispatch({\r\n      type: ALERT_MESSAGE,\r\n      payload: { alertMessage: 'One moment...', variant: 'warning' },\r\n    });\r\n    dispatch({ type: GET_USER_INFO, payload: res.data.id });\r\n    dispatch({ type: LOADING_START });\r\n  });\r\n};\r\n\r\n// Step 8: Save Form Values in Global Application State\r\n\r\nexport const handleFormValues = data => dispatch => {\r\n  return dispatch({ type: HANDLE_FORM_VALUES, payload: data });\r\n};\r\n\r\n// Step 9: Save Slider Values in Global Application State\r\n\r\nexport const handleSliderValue = data => (dispatch, getState) => {\r\n  let state = getState();\r\n  const playlistName = state.playlistName;\r\n  dispatch({\r\n    type: ALERT_MESSAGE,\r\n    payload: {\r\n      alertMessage: `Now loading \"${playlistName}\"... `,\r\n      variant: 'warning',\r\n    },\r\n  });\r\n  return dispatch({ type: HANDLE_SLIDER_VALUE, payload: data });\r\n};\r\n\r\n// Step 10: Create a New Playlist\r\n\r\nexport const handlePlaylistCreation = () => (dispatch, getState) => {\r\n  let state = getState();\r\n  const userId = state.userId;\r\n  const playlistName = state.playlistName;\r\n  const description = state.description;\r\n  const privacy = state.privacy;\r\n  return axios\r\n    .post(\r\n      `https://api.spotify.com/v1/users/${userId}/playlists`,\r\n      {\r\n        name: playlistName,\r\n        description: description,\r\n        public: privacy.toString(),\r\n      },\r\n      { headers: { Authorization: 'Bearer ' + localStorage.getItem('token') } }\r\n    )\r\n    .then(res => {\r\n      dispatch({ type: CREATE_PLAYLIST, payload: res.data.id });\r\n      dispatch({\r\n        type: GET_PLAYLIST_URL,\r\n        payload: res.data.external_urls.spotify,\r\n      });\r\n    });\r\n};\r\n\r\n// Step 11: Retrieve Query Seed\r\n\r\nconst randomizeQuery = () => {\r\n  var result = '';\r\n  result =\r\n    randomCharacters[Math.floor(Math.random() * randomCharacters.length)];\r\n  // dispatch({ type: RANDOMIZE_QUERY, payload: result });\r\n  return result;\r\n};\r\n\r\n// Step 12: Retrieve offset\r\n\r\nconst randomizeOffset = () => {\r\n  var result = '';\r\n  result = Math.floor(Math.random() * 10 + 1);\r\n  // dispatch({ type: RANDOMIZE_OFFSET, payload: result });\r\n  return result;\r\n};\r\n\r\n// Step 13: Search for songs\r\n\r\nexport const handleSearch = () => (dispatch, getState) => {\r\n  let state = getState();\r\n  const genre = state.genre;\r\n  const finalSliderValue = state.finalSliderValue;\r\n  const numSongs = state.numSongs;\r\n  let query;\r\n  let offset;\r\n  let trackLength = 0;\r\n  let numRetries = 7;\r\n  let tracks = [];\r\n  let limitPerRequest;\r\n  if (numSongs <= 50) {\r\n    limitPerRequest = numSongs;\r\n  } else {\r\n    limitPerRequest = 50;\r\n  }\r\n  (async function () {\r\n    while (trackLength <= numSongs && numRetries > 0) {\r\n      offset = randomizeOffset();\r\n      query = randomizeQuery();\r\n      const response = await axios\r\n        .get(\r\n          `https://api.spotify.com/v1/search?query=${query}*+genre%3A${genre}+year%3A+${finalSliderValue[0]}-${finalSliderValue[1]}&type=track&offset=${offset}&limit=${limitPerRequest}`,\r\n          {\r\n            headers: {\r\n              Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n            },\r\n          }\r\n        )\r\n        .then(res => {\r\n          tracks = [...tracks, ...res.data.tracks.items];\r\n\r\n          const hashMap = new Map();\r\n          tracks.forEach(track => {\r\n            let artistName = track.artists[0].name || 'Unknown';\r\n            let count = hashMap.get(artistName) || 0;\r\n            hashMap.set(artistName, ++count);\r\n          });\r\n          const dict = [...hashMap].filter(([artistName, count]) => count <= 2);\r\n          tracks = tracks.filter(track =>\r\n            dict.flat().includes(track.artists[0].name)\r\n          );\r\n\r\n          if (tracks.length > numSongs) {\r\n            tracks = tracks.splice(0, numSongs);\r\n          }\r\n          trackLength = tracks.length;\r\n        });\r\n      numRetries = numRetries - 1;\r\n    }\r\n    dispatch({ type: SEARCH_SONGS, payload: tracks });\r\n    dispatch({\r\n      type: ALERT_MESSAGE,\r\n      payload: {\r\n        alertMessage: 'Retrieving your tunes...',\r\n        variant: 'warning',\r\n      },\r\n    });\r\n  })();\r\n};\r\n\r\n// Step 14: Retrieve Track URIs from Search Results\r\n\r\nexport const handleTrackUris = () => (dispatch, getState) => {\r\n  let state = getState();\r\n  const searchResults = state.searchResults;\r\n  let uriList = [];\r\n  searchResults.map(song => uriList.push(song.uri));\r\n  return dispatch({ type: GET_TRACK_URIS, payload: uriList });\r\n};\r\n\r\n// Step 15: Add Songs to playlist\r\n\r\nexport const addToPlaylist = () => (dispatch, getState) => {\r\n  let state = getState();\r\n  const playlistId = state.playlistId;\r\n  const trackUris = state.trackUris;\r\n  return axios\r\n    .post(\r\n      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\r\n      { uris: trackUris },\r\n      { headers: { Authorization: 'Bearer ' + localStorage.getItem('token') } }\r\n    )\r\n    .then(() => {\r\n      dispatch({\r\n        type: LOADING_FINISH,\r\n      });\r\n      dispatch({ type: SUCCESS_ALERT });\r\n    })\r\n    .catch(() => {\r\n      dispatch({\r\n        type: ALERT_MESSAGE,\r\n        payload: {\r\n          alertMessage: `An error has occurred 😥. Please refresh and try again.`,\r\n          variant: 'danger',\r\n        },\r\n      });\r\n      //localStorage.removeItem('token');\r\n      //localStorage.removeItem('validated');\r\n    });\r\n};\r\n\r\n// Step 16: Combine all action creators in sequential order\r\n\r\nexport const generatePlaylists = data => dispatch => {\r\n  dispatch(handleUserInfo())\r\n    .then(() => {\r\n      return dispatch(handleFormValues(data.formValues));\r\n    })\r\n    .then(() => {\r\n      return dispatch(handleSliderValue(data.sliderValue));\r\n    })\r\n    .then(() => {\r\n      return dispatch(handlePlaylistCreation());\r\n    })\r\n    .then(() => {\r\n      return dispatch(handleSearch());\r\n    })\r\n    .then(() => {\r\n      return dispatch(handleTrackUris());\r\n    })\r\n    .then(() => {\r\n      return dispatch(addToPlaylist());\r\n    });\r\n};\r\n","import { useCallback } from 'react';\r\n\r\n// Custom hook that validates form inputs for use with useForm\r\nconst useYupValidation = (validationSchema) =>\r\n  useCallback(\r\n    async (data) => {\r\n      try {\r\n        const values = await validationSchema.validate(data, {\r\n          abortEarly: false,\r\n        });\r\n\r\n        return {\r\n          values,\r\n          errors: {},\r\n        };\r\n      } catch (errors) {\r\n        return {\r\n          values: {},\r\n          errors: errors.inner.reduce(\r\n            (allErrors, currentError) => ({\r\n              ...allErrors,\r\n              [currentError.path]: {\r\n                type: currentError.type ?? 'validation',\r\n                message: currentError.message,\r\n              },\r\n            }),\r\n            {}\r\n          ),\r\n        };\r\n      }\r\n    },\r\n    [validationSchema]\r\n  );\r\n\r\nexport default useYupValidation;\r\n","import { useState } from 'react';\r\n\r\nconst useSlider = (initialState) => {\r\n  const [value, setValue] = useState(initialState);\r\n\r\n  return {\r\n    value,\r\n    setValue,\r\n    bind: {\r\n      onChange: (event, newValue) => {\r\n        setValue(newValue);\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nexport default useSlider;\r\n","import React, { useEffect } from 'react';\r\nimport CustomSlider from '../CustomSlider/CustomSlider';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport { genres } from '../../assets/Genres';\r\nimport { schema } from '../../assets/playlistSchema';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  generatePlaylists,\r\n  handleToken,\r\n  retrieveCodeFromURL,\r\n  getToken,\r\n  initialAuthorize,\r\n} from '../../redux/actions/actions';\r\n\r\nimport { useForm } from 'react-hook-form';\r\nimport useYupValidation from '../../hooks/useYupValidation';\r\nimport useSlider from '../../hooks/useSlider';\r\nimport { Spinner } from 'react-spinners-css';\r\n\r\nconst PlaylistForm = props => {\r\n  const {\r\n    generatePlaylists,\r\n    playlistUrl,\r\n    success,\r\n    active,\r\n    alertMessage,\r\n    variant,\r\n    initialAuthorize,\r\n    handleToken,\r\n    retrieveCodeFromURL,\r\n    isLoading,\r\n  } = props;\r\n\r\n  // Retrieve form input data from user, and validate their responses\r\n  const resolver = useYupValidation(schema);\r\n  const { register, handleSubmit, formState } = useForm({\r\n    resolver,\r\n    mode: 'onChange',\r\n  });\r\n  const { value: sliderValue, bind: bindSliderValues } = useSlider([\r\n    1970, 2000,\r\n  ]);\r\n\r\n  // Parse URL for auth code and exchange for token on initial render\r\n  useEffect(() => {\r\n    retrieveCodeFromURL();\r\n    handleToken();\r\n  }, []);\r\n\r\n  // On submit, dispatch form values to Redux store\r\n  const onSubmit = data => {\r\n    generatePlaylists({ formValues: data, sliderValue });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className='homepage-container'>\r\n        <Container className='title'>\r\n          <h1>Spotify Playlist Generator 🎧</h1>\r\n        </Container>\r\n        {!localStorage.getItem('validated') && (\r\n          <Container className='disclaimer'>\r\n            <h2>\r\n              In order to use this application, you must authorize your Spotify\r\n              account.\r\n            </h2>\r\n            {isLoading ? (\r\n              <Spinner color='black' />\r\n            ) : (\r\n              <button onClick={initialAuthorize} data-testid='auth-button'>\r\n                I agree, authorize my account\r\n              </button>\r\n            )}\r\n          </Container>\r\n        )}\r\n        {localStorage.getItem('validated') && (\r\n          <Container>\r\n            <Form onSubmit={handleSubmit(onSubmit)}>\r\n              <Form.Row className='desktop'>\r\n                <Col>\r\n                  <Form.Group>\r\n                    <Form.Label>PLAYLIST NAME</Form.Label>\r\n                    <Form.Control\r\n                      size='lg'\r\n                      type='text'\r\n                      placeholder='\"My Awesome New Playlist\"'\r\n                      {...register('playlistName', { required: true })}\r\n                      autoComplete='off'\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Col xs={5}>\r\n                  <Form.Group>\r\n                    <Form.Label>MAX # OF SONGS</Form.Label>\r\n                    <Form.Control\r\n                      {...register('numSongs', { required: true })}\r\n                      type='number'\r\n                      min={5}\r\n                      max={150}\r\n                      size='lg'\r\n                      autoComplete='off'\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                  <Form.Group>\r\n                    <Form.Label>PRIVATE/PUBLIC</Form.Label>\r\n                    <Form.Check\r\n                      {...register('privacy', { required: true })}\r\n                      type='switch'\r\n                      id='custom-switch'\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Col>\r\n                  <Form.Group>\r\n                    <Form.Label>DESCRIPTION</Form.Label>\r\n                    <Form.Control\r\n                      {...register('description', { required: true })}\r\n                      rows={3}\r\n                      as='textarea'\r\n                      maxLength='250'\r\n                      autoComplete='off'\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Col>\r\n                  <Form.Label>YEAR RANGE</Form.Label>\r\n                  <CustomSlider\r\n                    valueLabelDisplay='auto'\r\n                    min={1950}\r\n                    max={2022}\r\n                    name='year'\r\n                    value={sliderValue}\r\n                    {...bindSliderValues}\r\n                    aria-labelledby='range-slider'\r\n                  />\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Col>\r\n                  <Form.Group>\r\n                    <Form.Label>GENRE</Form.Label>\r\n                    <Form.Control {...register('genre')} as='select'>\r\n                      {genres.map((genre, i) => (\r\n                        <option\r\n                          {...genre.attributes}\r\n                          value={genre.value}\r\n                          key={i}\r\n                        >\r\n                          {genre.text}\r\n                        </option>\r\n                      ))}\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Col>\r\n                  <Form.Group>\r\n                    <Button disabled={!formState.isValid} type='submit'>\r\n                      Generate Playlist\r\n                    </Button>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Col>\r\n                  {active && <Alert variant={variant}>{alertMessage}</Alert>}\r\n\r\n                  <Alert\r\n                    variant='success'\r\n                    style={{ visibility: success ? 'visible' : 'hidden' }}\r\n                  >\r\n                    Your playlist has successfully been created. You may view it{' '}\r\n                    <Alert.Link href={playlistUrl}>here</Alert.Link>.\r\n                  </Alert>\r\n                </Col>\r\n              </Form.Row>\r\n            </Form>\r\n          </Container>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    authUri: state.authUri,\r\n    success: state.success,\r\n    playlistUrl: state.playlistUrl,\r\n    active: state.active,\r\n    playlistName: state.playlistName,\r\n    alertMessage: state.alertMessage,\r\n    variant: state.variant,\r\n    token: state.token,\r\n    isLoading: state.isLoading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  generatePlaylists,\r\n  initialAuthorize,\r\n  handleToken,\r\n  retrieveCodeFromURL,\r\n  getToken,\r\n})(PlaylistForm);\r\n\r\nexport { PlaylistForm };\r\n","import './App.scss';\r\nimport PlaylistForm from './components/PlaylistForm/PlaylistForm';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <PlaylistForm />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {\r\n  GET_URI,\r\n  GET_USER_INFO,\r\n  CREATE_PLAYLIST,\r\n  SEARCH_SONGS,\r\n  GET_TRACK_URIS,\r\n  HANDLE_FORM_VALUES,\r\n  HANDLE_SLIDER_VALUE,\r\n  SUCCESS_ALERT,\r\n  GET_PLAYLIST_URL,\r\n  LOADING_START,\r\n  ALERT_MESSAGE,\r\n  LOADING_FINISH,\r\n  SUCCESS_FINISH,\r\n  ACCESS_CODE_SUCCESS,\r\n  START_AUTHORIZATION,\r\n  LOADING_DONE,\r\n} from '../constants/actiontypes';\r\n\r\nconst initialState = {\r\n  authUri: '',\r\n  userId: '',\r\n  playlistId: '',\r\n  searchResults: [],\r\n  trackUris: [],\r\n  playlistName: '',\r\n  description: '',\r\n  privacy: false,\r\n  genre: '',\r\n  numSongs: '',\r\n  finalSliderValue: [],\r\n  snapShotId: '',\r\n  playlistUrl: '',\r\n  alertMessage: '',\r\n  variant: '',\r\n  success: false,\r\n  active: false,\r\n  code: '',\r\n  authMessage: '',\r\n  promiseError: false,\r\n  isLoading: false,\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_URI:\r\n      return { ...state, authUri: action.payload, authMessage: action.payload };\r\n    case GET_USER_INFO:\r\n      return { ...state, userId: action.payload };\r\n    case HANDLE_FORM_VALUES:\r\n      return {\r\n        ...state,\r\n        playlistName: action.payload.playlistName,\r\n        description: action.payload.description,\r\n        privacy: action.payload.privacy,\r\n        genre: action.payload.genre,\r\n        numSongs: action.payload.numSongs,\r\n      };\r\n    case HANDLE_SLIDER_VALUE:\r\n      return { ...state, finalSliderValue: action.payload };\r\n    case CREATE_PLAYLIST:\r\n      return { ...state, playlistId: action.payload };\r\n    case SEARCH_SONGS:\r\n      return { ...state, searchResults: action.payload };\r\n    case GET_TRACK_URIS:\r\n      return { ...state, trackUris: action.payload };\r\n    case GET_PLAYLIST_URL:\r\n      return { ...state, playlistUrl: action.payload };\r\n    case SUCCESS_ALERT:\r\n      return { ...state, success: true };\r\n    case LOADING_START:\r\n      return { ...state, active: true };\r\n    case ALERT_MESSAGE:\r\n      return {\r\n        ...state,\r\n        alertMessage: action.payload.alertMessage,\r\n        variant: action.payload.variant,\r\n      };\r\n    case LOADING_FINISH:\r\n      return { ...state, active: false };\r\n    case SUCCESS_FINISH:\r\n      return { ...state, success: false };\r\n    case ACCESS_CODE_SUCCESS:\r\n      return { ...state, code: action.payload };\r\n    case START_AUTHORIZATION:\r\n      return { ...state, isLoading: true };\r\n    case LOADING_DONE:\r\n      return { ...state, isLoading: false };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport reducer from './redux/reducers/reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}